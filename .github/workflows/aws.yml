# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when there is a push to the "main" branch.
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of the `ECR_REPOSITORY` environment variable in the workflow below with your repository's name.
#    Replace the value of the `AWS_REGION` environment variable in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the value of the `ECS_SERVICE` environment variable in the workflow below with the name you set for the Amazon ECS service.
#    Replace the value of the `ECS_CLUSTER` environment variable in the workflow below with the name you set for the cluster.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of the `ECS_TASK_DEFINITION` environment variable in the workflow below with the path to the JSON file.
#    Replace the value of the `CONTAINER_NAME` environment variable in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

name: Deploy to Amazon ECS

on:
  push:
    branches:
      - main

env:
  AWS_REGION: ap-northeast-2                      # AWS region 설정
  ECR_REPOSITORY: assist-api-server               # ECR 저장소 이름
  ECS_SERVICE: assist-server-service              # ECS 서비스 이름
  ECS_CLUSTER: Tuzzain-Cluster                    # ECS 클러스터 이름
  ECS_TASK_DEFINITION: .aws/task-definition.json  # ECS 작업 정의 파일 경로
  CONTAINER_NAME_1: stockassist                   # 첫 번째 컨테이너 이름 (stockassist)
  CONTAINER_NAME_2: redis                         # 두 번째 컨테이너 이름 (redis)

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    # 로그인
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    # Docker 빌드 및 푸시
    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    # 환경변수 치환을 위한 JSON-safe 값으로 변환
    - name: Generate updated ECS task definition
      run: |
        # 비밀 값들을 JSON-safe 값으로 변환
        CRAWLING_DB_PASSWORD_ESCAPED=$(echo "${{ secrets.CRAWLING_DB_PASSWORD }}" | jq -Rsa .)
        CRAWLING_DB_URL_ESCAPED=$(echo "${{ secrets.CRAWLING_DB_URL }}" | jq -Rsa .)
        CRAWLING_DB_USER_ESCAPED=$(echo "${{ secrets.CRAWLING_DB_USER }}" | jq -Rsa .)
        GMAIL_APP_PASSWORD_ESCAPED=$(echo "${{ secrets.GMAIL_APP_PASSWORD }}" | jq -Rsa .)
        GMAIL_USERNAME_ESCAPED=$(echo "${{ secrets.GMAIL_USERNAME }}" | jq -Rsa .)
        JWT_SECRET_ESCAPED=$(echo "${{ secrets.JWT_SECRET }}" | jq -Rsa .)
    
        # task definition에서 환경변수를 치환
        sed -e "s|{{DB_URL}}|${{ secrets.DB_URL }}|g" \
            -e "s|{{DB_USER}}|${{ secrets.DB_USER }}|g" \
            -e "s|{{DB_PASSWORD}}|${{ secrets.DB_PASSWORD }}|g" \
            -e "s|{{CRAWLING_DB_URL}}|$CRAWLING_DB_URL_ESCAPED|g" \
            -e "s|{{CRAWLING_DB_USER}}|$CRAWLING_DB_USER_ESCAPED|g" \
            -e "s|{{CRAWLING_DB_PASSWORD}}|$CRAWLING_DB_PASSWORD_ESCAPED|g" \
            -e "s|{{GMAIL_APP_PASSWORD}}|$GMAIL_APP_PASSWORD_ESCAPED|g" \
            -e "s|{{GMAIL_USERNAME}}|$GMAIL_USERNAME_ESCAPED|g" \
            -e "s|{{JWT_SECRET}}|$JWT_SECRET_ESCAPED|g" \
            ${{ env.ECS_TASK_DEFINITION }} > ecs-task-definition-updated.json

    # 수정된 ecs-task-definition-updated.json에 새 이미지 ID를 채움
    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ecs-task-definition-updated.json
        container-name: ${{ env.CONTAINER_NAME_1 }}   # 첫 번째 컨테이너 이름 (stockassist)
        image: ${{ steps.build-image.outputs.image }}

    # 두 번째 컨테이너(redis)에 대해 동일한 작업
    - name: Fill in the image ID for the Redis container
      id: task-def-redis
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ecs-task-definition-updated.json
        container-name: ${{ env.CONTAINER_NAME_2 }}   # 두 번째 컨테이너 이름 (redis)
        image: ${{ steps.build-image.outputs.image }}

    # ECS에 배포
    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        force-new-deployment: true   # 기존 task는 더이상 사용하지 않으므로 종료
        wait-for-service-stability: true  # 배포가 완료될 때까지 기다림
